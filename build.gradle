plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.12.0'
}

group = 'com.check'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$projectDir/src/main/resources/openapi/openapi.yml"
	outputDir = "$buildDir/generated-sources/openapi"
	apiPackage = "com.check.love.api"
	modelPackage = "com.check.love.api.model"
	configOptions = [
		delegatePattern: "true",
		useSpringBoot3: "true",
		useTags: "true",
		interfaceOnly: "true",
		skipDefaultInterface: "true",
		useJakartaEe: "true",
		performBeanValidation: "true",
		useBeanValidation: "true",
		dateLibrary: "java8"
	]
}

sourceSets {
	main {
		java {
			srcDir "$buildDir/generated-sources/openapi/src/main/java"
		}
	}
}

compileJava.dependsOn('openApiGenerate')

task generateTypeScriptClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "typescript-axios"
	inputSpec = "$projectDir/src/main/resources/openapi/openapi.yml"
	outputDir = "${projectDir}/../check-love/api-client"
	configOptions = [
		supportsES6: "true",
		npmName: "@check/love-api-client",
		npmVersion: "1.0.0",
		withInterfaces: "true",
		useSingleRequestParameter: "true"
	]
	
	// npm install 실행
	doLast {
		println "TypeScript API 클라이언트가 생성되었습니다. npm install을 실행합니다..."
		
		def npmInstallResult = exec {
			workingDir "${projectDir}/../check-love/api-client"
			if (System.getProperty('os.name').toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'npm', 'install'
			} else {
				commandLine 'npm', 'install'
			}
			ignoreExitValue = true
		}
		
		if (npmInstallResult.getExitValue() == 0) {
			println "✅ npm install이 성공적으로 완료되었습니다."
		} else {
			println "⚠️ npm install 중 오류가 발생했습니다."
		}
	}
}

task generateAll {
	description = "OpenAPI 서버 인터페이스와 TypeScript 클라이언트를 모두 생성합니다."
	group = "openapi tools"
	
	dependsOn 'openApiGenerate', 'generateTypeScriptClient'
	
	doLast {
		println "✅ 모든 OpenAPI 코드 생성이 완료되었습니다!"
		println "- Java 서버 인터페이스 생성 완료: $buildDir/generated-sources/openapi"
		println "- TypeScript 클라이언트 생성 완료: $buildDir/generated-sources/openapi-typescript"
	}
}
